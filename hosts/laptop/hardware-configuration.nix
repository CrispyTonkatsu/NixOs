# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "vmd" "xhci_pci" "thunderbolt" "nvme" "usbhid" "usb_storage" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/52699f90-3b06-4126-95eb-7c28400d9548";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/2D43-E7E9";
      fsType = "vfat";
      options = [ "fmask=0022" "dmask=0022" ];
    };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp108s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlo1.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

# Nvidia setup
  hardware.opengl = {
	  enable = true;
  };

  hardware.nvidia = {
# This setting is required
  modesetting.enable = true;

# Nvidia power management. Experimental and can cause sleep/suspend to fail.
# Enable this if you have graphical corruption issue s or application crashes after waking up
# from sleep. This fixes it by saving the entire VRAM memory to /tmp/ instead
# of just the bare essentials.
  powerManagement.enable = false;

# Fine-grained power management. Turns off GPU when not in use.
# Experimental and only works on Nvidia GPUs (Turing or newer).
  powerManagement.finegrained = false;

# Use the Nvidia open source kernel module (not to be confused with the
# independent third-party "nouveau" open source driver).
# Support is limited to the Turing and later architectures. Full list of
# supported GPUs is at the nix wiki
# Currently in alpha-quality/buggy, so false is currently the recommended setting.
  open = false;

# Enable the Nvidia settings menu.
# accessible via 'nvidia-settings'
  nvidiaSettings = true;

# Optionally, you may need to select the appropriate driver version for your specific GPU.
  package = config.boot.kernelPackages.nvidiaPackages.stable;

##### Pull rq to the nix nvidia page that they should rec using nix-shell for the lshw so the user doesn't need to install it

  prime = {
# Offload mode (read wiki to implement it in rofi)
	  offload = {
		  enable = true;
		  enableOffloadCmd = true;
	  };

# Ibus details
	  intelBusId = "PCI:0:2:0";
	  nvidiaBusId = "PCI:1:0:0";
  };
  };

  # Audio Card Setup
  boot.kernelPackages = pkgs.linuxPackagesFor pkgs.linux_latest;

  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    # If you want to use JACK applications, uncomment this
    #jack.enable = true;

    # use the example session manager (no others are packaged yet so this is enabled by default,
    # no need to redefine it in your config for now)
    # media-session.enable = true;
    wireplumber.enable = true;

  };
}
